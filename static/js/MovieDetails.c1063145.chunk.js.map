{"version":3,"sources":["utils/MoviesApi.js","components/MovieDetails/MovieDetails.module.css","components/MovieDetails/MovieDetails.jsx"],"names":["BASE_URL","API_KEY","moviesApi","this","searchQuery","page","totalResults","currentRequest","a","url","fetch","response","json","movies","total_results","console","log","genres","query","id","movie","info","cast","reviews","results","newQuery","module","exports","Cast","lazy","Reviews","MovieDetails","history","useHistory","location","useLocation","movieId","useParams","useRouteMatch","useState","setInfo","useEffect","fetchMovieById","fecthMovieInfo","className","styles","goBackBtn","type","onClick","push","state","from","moviePosterImg","src","poster_path","alt","title","movieInfo","vote_average","vote_count","overview","map","genre","name","join","to","addInfoLink","activeClassName","activeInfoLink","fallback","color","height","width","path"],"mappings":"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","file":"static/js/MovieDetails.c1063145.chunk.js","sourcesContent":["const BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '925491183043d455ae6efbd6833f46c6';\n\nclass MoviesApi {\n  constructor() {\n    this.searchQuery = '';\n    this.page = 1;\n    this.totalResults = null;\n    this.currentRequest = null;\n  }\n\n  async fetchTrendingMovies() {\n    this.currentRequest = 'trending';\n    const url = `${BASE_URL}/trending/movie/week?api_key=${API_KEY}&page=${this.page}&language=ru`;\n\n    try {\n      const response = await fetch(url);\n      const movies = await response.json();\n      this.totalResults = movies.total_results;\n      this.currentRequest = 'trending';\n      return movies;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  //---genres---\n  async fetchGenres() {\n    // const url = `${BASE_URL}/trending/movie/week?api_key=${API_KEY}&language=ru`;\n    const url = `${BASE_URL}/genre/movie/list?api_key=${API_KEY}&language=ru`;\n\n    try {\n      const response = await fetch(url);\n      const genres = response.json();\n      return genres;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n  //------------\n\n  async fetchMoviesByQuery(query) {\n    this.currentRequest = 'search';\n    this.searchQuery = query;\n    const url = `${BASE_URL}/search/movie?api_key=${API_KEY}&language=ru&page=${this.page}&include_adult=false&query=${this.searchQuery}`;\n\n    try {\n      const response = await fetch(url);\n      const movies = await response.json();\n      this.totalResults = movies.total_results;\n      this.currentRequest = 'search';\n      return movies;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async fetchMovieById(id) {\n    const url = `${BASE_URL}/movie/${id}?api_key=${API_KEY}&language=ru&external_source=imdb_id`;\n\n    try {\n      const response = await fetch(url);\n      const movie = response.json();\n      return movie;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async fetchMovieCast(id) {\n    const url = `${BASE_URL}/movie/${id}/credits?api_key=${API_KEY}&language=ru`;\n\n    try {\n      const response = await fetch(url);\n      const info = await response.json();\n      const cast = info.cast;\n      return cast;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async fetchMovieReviews(id) {\n    const url = `${BASE_URL}/movie/${id}/reviews?api_key=${API_KEY}&language=en`;\n\n    try {\n      const response = await fetch(url);\n      const info = await response.json();\n      const reviews = info.results;\n      return reviews;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  incrementPage() {\n    this.page += 1;\n  }\n\n  resetPage() {\n    this.page = 1;\n  }\n\n  get query() {\n    return this.searchQuery;\n  }\n\n  set query(newQuery) {\n    this.searchQuery = newQuery;\n  }\n}\n\nconst moviesApi = new MoviesApi();\n\nexport default moviesApi;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"MovieDetails\":\"MovieDetails_MovieDetails__3RsBP\",\"moviePosterImg\":\"MovieDetails_moviePosterImg__oh9y5\",\"movieInfo\":\"MovieDetails_movieInfo__2mHxA\",\"addInfoLink\":\"MovieDetails_addInfoLink__3WSGg\",\"activeInfoLink\":\"MovieDetails_activeInfoLink__38Gw8\",\"goBackBtn\":\"MovieDetails_goBackBtn__1uZDU\"};","import { useState, lazy, Suspense } from 'react';\nimport {\n  NavLink,\n  Switch,\n  Route,\n  useParams,\n  useRouteMatch,\n  useHistory,\n  useLocation,\n} from 'react-router-dom';\nimport { useEffect } from 'react/cjs/react.development';\nimport Loader from 'react-loader-spinner';\nimport moviesApi from 'utils/MoviesApi';\nimport styles from 'components/MovieDetails/MovieDetails.module.css';\n// import Cast from './Cast/Cast';\n// import Reviews from './Reviews/Reviews';\n\nconst Cast = lazy(() =>\n  import('components/MovieDetails/Cast/Cast' /* webpackChunkName: 'Cast' */),\n);\nconst Reviews = lazy(() =>\n  import(\n    'components/MovieDetails/Reviews/Reviews' /* webpackChunkName: 'Reviews' */\n  ),\n);\n\nexport default function MovieDetails() {\n  const history = useHistory();\n  const location = useLocation();\n  const { movieId } = useParams();\n  const { url } = useRouteMatch();\n  const [info, setInfo] = useState(null);\n\n  useEffect(() => {\n    if (info) {\n      return;\n    }\n\n    async function fecthMovieInfo() {\n      const response = await moviesApi.fetchMovieById(movieId);\n      setInfo(response);\n    }\n\n    fecthMovieInfo();\n  }, [info, movieId]);\n\n  function onGoBack() {\n    history.push(location?.state?.from ?? '/');\n  }\n\n  return (\n    <>\n      {info && (\n        <>\n          <button className={styles.goBackBtn} type=\"button\" onClick={onGoBack}>\n            Назад\n          </button>\n          <div className={styles.MovieDetails}>\n            <img\n              className={styles.moviePosterImg}\n              src={`https://image.tmdb.org/t/p/w500/${info.poster_path}`}\n              alt={info.title}\n            />\n            <div className={styles.movieInfo}>\n              <h2>{info.title}</h2>\n              <p>\n                Оценка: {info.vote_average} ({info.vote_count})\n              </p>\n              <h3>Описание</h3>\n              <p>{info.overview}</p>\n              <h3>Жанры</h3>\n              {info.genres.map(genre => genre.name).join(', ')}\n            </div>\n          </div>\n          <div>\n            <p>Дополнительно:</p>\n            <ul>\n              <li>\n                <NavLink\n                  to={`${url}/cast`}\n                  className={styles.addInfoLink}\n                  activeClassName={styles.activeInfoLink}\n                >\n                  Актеры\n                </NavLink>\n              </li>\n              <li>\n                <NavLink\n                  to={`${url}/reviews`}\n                  className={styles.addInfoLink}\n                  activeClassName={styles.activeInfoLink}\n                >\n                  Ревизии (English)\n                </NavLink>\n              </li>\n            </ul>\n\n            <Suspense\n              fallback={\n                <Loader\n                  className=\"Loader\"\n                  type=\"Oval\"\n                  color=\"rgb(0, 224, 217)\"\n                  height={100}\n                  width={100}\n                />\n              }\n            >\n              <Switch>\n                <Route path={`${url}/cast`}>\n                  <Cast movieId={movieId} />\n                </Route>\n                <Route path={`${url}/reviews`}>\n                  <Reviews movieId={movieId} />\n                </Route>\n              </Switch>\n            </Suspense>\n          </div>\n        </>\n      )}\n    </>\n  );\n}\n"],"sourceRoot":""}